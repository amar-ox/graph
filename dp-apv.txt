=================== show topology =======================
MATCH (r:Router)-[:HAS_PORT]->(p:Port)-[:LINKS_TO]->(pp:Port)<-[:HAS_PORT]-(rr:Router)
CALL apoc.create.vRelationship(r,'LINK',{},rr) YIELD rel
RETURN r,rel,rr

=================== clean =======================
MATCH (s:State) DETACH DELETE s

===================== print trees =======================
MATCH (r:Router)-[:HAS_PORT]->(p:Port)-[:LINKS_TO]-()
WITH DISTINCT r,p
WITH collect(r.name+','+p.name) as ports
CALL trees.print(ports, true) YIELD port, tree, flag
//WITH port, tree, flag WHERE flag = 'dead branch'
RETURN port, tree, flag

===================== compute trees =====================
MATCH (r:Router)-[:HAS_PORT]->(p:Port)-[:LINKS_TO]-()
WITH DISTINCT r,p
WITH collect(r.name+','+p.name) as ports
CALL trees.compute(ports, false) YIELD time
RETURN time

===================== get trees ==========================
MATCH (s:State)<-[:ORIG_STATE]-()
MATCH path = (s)-[:FWD_NEXT*]->(e:State) WHERE NOT (e)-[:FWD_NEXT]->()
UNWIND nodes(path) AS n
MATCH (n)<-[]-(p:Port)<-[:HAS_PORT]-(r:Router) 
WITH path, collect({state: n, router:r, port:p}) as ports, e
RETURN REDUCE(s = '', pr IN ports | s + ' ' + pr.router.name + ',' + pr.port.name) AS paths, e.flag

============== test active ports waypoint ================
MATCH (r:Router)-[:HAS_PORT]->(p:Port)-[:LINKS_TO]-()
WITH DISTINCT r, p
MATCH path = ()-[:ORIG_STATE]->(os:State)-[:FWD_NEXT*]->(:State)<-[:FWD_STATE]-(:Port {name: p.name}) WHERE length(path) > 2
RETURN r.name+','+p.name AS portname, count(path)

============== find blackholes ===========================
MATCH (r:Router)-[:HAS_PORT|HAS_VLAN]->(i)-[:FWD]->(f:Fwd)-[:HAS_EC]->(ec:EC)
WITH r, COLLECT(ec) AS connectedECs
MATCH (allEC:EC) WHERE NOT allEC IN connectedECs
RETURN r, COLLECT(DISTINCT allEC.v) AS MissingECs


=====================================================================================================================
================================= Port <- State (w/o state merge) ===================================================
MATCH (source:Port)-[r:FWD_STATE]->(target:State)
WITH gds.graph.project(
  'portAndState',
  target,
  source,
  {
    relationshipType: type(r)
  }
) AS g
RETURN g.graphName AS graph, g.nodeCount AS nodes, g.relationshipCount AS rels
-------------------
CALL gds.pageRank.stream('portAndState')
YIELD nodeId, score
RETURN nodeId as portId, score
ORDER BY score DESC, portId


================================= State -> State for one tree (with state merge) ====================================
MATCH (source:State {originPort: 11})-[r:FWD_NEXT]->(target:State)
WITH gds.graph.project(
  'tree11',
  source,
  target,
  {
    relationshipType: type(r)
  }
) AS g
RETURN g.graphName AS graph, g.nodeCount AS nodes, g.relationshipCount AS rels
----
CALL gds.betweenness.stream('tree11')
YIELD nodeId, score
RETURN nodeId, score
ORDER BY score DESC
----
MATCH (r:Router)-[:HAS_PORT]->(p:Port)-[:LINKS_TO]-()
WITH DISTINCT r,p
CALL gds.betweenness.stream('tree'+id(p))
YIELD nodeId, score
WITH r, p, nodeId, score ORDER BY score DESC
WITH r, p, collect({id:nodeId, sc:score}) AS results
WITH r, p, head(results) AS res
MATCH (s:State)-[]-(pp:Port)-[]-(rr:Router) WHERE id(s) = res.id
RETURN r.name+','+p.name AS origPort, rr.name+','+pp.name AS btwPort ORDER BY origPort


===================================== Path -> Port (w/o state merge) ===========================
MATCH (s:State)<-[:ORIG_STATE]-()
MATCH path = (s)-[:FWD_NEXT*]->(e:State) WHERE NOT (e)-[:FWD_NEXT]->()
WITH collect(nodes(path)) AS nodePaths
UNWIND nodePaths AS nodes
WITH nodes, size(nodes)/2.0 - 1 AS l, nodes[0] AS root, nodes[-1] AS leaf
MATCH (p:Port)-[:FWD_STATE]->(state:State)
WHERE state IN nodes
WITH root, leaf, l, collect(DISTINCT p) AS connectedPorts 
MERGE (path:Path {origin: root.originPort, length: l, dest: id(leaf)})
FOREACH (port IN connectedPorts | MERGE (path)-[:CONTAINS]->(port))
RETURN path
----
port similarity ...


============================== Port -> EC (regardless of state merge) =======================
MATCH (p:Port)-[]->(s:State)-[:HAS_EC]->(ec:EC)
WHERE NOT (s)-[:FWD_NEXT]->()
WITH DISTINCT p, collect(DISTINCT ec) AS portEcs
UNWIND portEcs AS ecs
MERGE (p)-[:HAS_EC]->(ecs)
RETURN p
----
CALL gds.graph.project(
    'portsAndEcs',
    ['Port', 'EC'],
    {
        HAS_EC: {}
    }
);
----
CALL gds.nodeSimilarity.stream('portsAndEcs')
YIELD node1, node2, similarity
WITH gds.util.asNode(node1) AS port1, gds.util.asNode(node2) AS port2, similarity
MATCH (r1:Router)-[]->(port1)
MATCH (r2:Router)-[]->(port2)
RETURN r1.name+'/'+port1.name AS p1, r2.name+'/'+port2.name AS p2, similarity 
ORDER BY similarity DESCENDING


============================== Router -> EC (regardless of state merge) =======================
MATCH (r:Router)-[]->(p:Port)-[:HAS_EC]->(ec:EC)
WITH DISTINCT r, collect(DISTINCT ec) AS routerEcs
UNWIND routerEcs AS ecs
MERGE (r)-[:HAS_EC]->(ecs)
RETURN r
----
CALL gds.graph.project(
    'nodesAndEcs',
    ['Router', 'EC'],
    {
        HAS_EC: {}
    }
);
----
CALL gds.nodeSimilarity.stream('nodesAndEcs')
YIELD node1, node2, similarity
RETURN gds.util.asNode(node1).name AS Person1, gds.util.asNode(node2).name AS Person2, similarity
ORDER BY similarity DESCENDING, Person1, Person2


============================== Clustering: Router -> EC ==========================================
create EC.connections vector ...
----
CALL gds.graph.project(
    'ecsRouters',
    {
      EC: {
        properties: 'connections'
      }
    },
    '*'
)
----
CALL gds.beta.kmeans.write('ecsRouters', {
  nodeProperty: 'connections',
  k: 7,
  writeProperty: 'kmeans'
})
YIELD nodePropertiesWritten
----
MATCH (ec:EC)
WITH ec, 'CLUSTER_'+ec.kmeans AS kmeansValue
call apoc.create.addLabels([ id(ec) ], [ kmeansValue ]) yield node
with node
return node
----
MATCH (ec:EC) 
WITH labels(ec)[1] AS cluster, collect(ec.v) AS aps
RETURN cluster, aps


============================== Clustering: Port -> EC (active-ports / all-ports) ============================================
MATCH (p:Port)-[:HAS_EC]->(:EC)
WITH collect(DISTINCT p) AS ports
MATCH (ec:EC)
WITH ec, ports ORDER BY ec.v
WITH ec, [port IN ports | CASE WHEN (ec)<-[:HAS_EC]-(port) THEN 1 ELSE 0 END] AS connections
SET ec.connections = connections
----
MATCH (p:Port)-[:HAS_EC]->(:EC)
WHERE (p)-[:LINKS_TO]-()
WITH collect(DISTINCT p) AS ports
MATCH (ec:EC)
WITH ec, ports ORDER BY ec.v
WITH ec, [port IN ports | CASE WHEN (ec)<-[:HAS_EC]-(port) THEN 1 ELSE 0 END] AS connections
SET ec.connections = connections
----
CALL gds.graph.project(
    'ecsPorts',
    {
      EC: {
        properties: 'connections'
      }
    },
    '*'
)
----
CALL gds.beta.kmeans.write('ecsPorts', {
  nodeProperty: 'connections',
  k: 7,
  writeProperty: 'kmeans'
})
YIELD nodePropertiesWritten
----
MATCH (ec:EC)
WITH ec, 'CLUSTER_'+ec.kmeans AS kmeansValue
call apoc.create.addLabels([ id(ec) ], [ kmeansValue ]) yield node
with node
return node
----
MATCH (ec:EC) 
WITH labels(ec)[1] AS cluster, collect(ec.v) AS aps
RETURN cluster, aps


=====================================================================================================
CALL gds.graph.list()
YIELD graphName, nodeCount, relationshipCount
RETURN graphName, nodeCount, relationshipCount
ORDER BY graphName ASC

CALL gds.graph.drop('fwd-graph') YIELD graphName;
